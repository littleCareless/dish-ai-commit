# .github/workflows/release.yml

# ----------------------------------------------------------------
# Ëá™Âä®ÂåñÂèëÂ∏ÉÂ∑•‰ΩúÊµÅ (Automated Release Workflow) - v2 (Êï¥ÂêàÁâà)
# ----------------------------------------------------------------
# Ëß¶ÂèëÊó∂Êú∫: ÂΩì‰∏Ä‰∏™Ê†ºÂºè‰∏∫ vX.Y.Z ÁöÑÊñ∞Ê†áÁ≠æË¢´Êé®ÈÄÅÂà∞ main Êàñ develop ÂàÜÊîØÊó∂„ÄÇ
#
# Ê†∏ÂøÉÂäüËÉΩ:
# 1. Âü∫‰∫é Git Ê†áÁ≠æËß¶ÂèëÔºåÂå∫ÂàÜÈ¢ÑÂèëÂ∏É (develop) ÂíåÊ≠£ÂºèÂèëÂ∏É (main)„ÄÇ
# 2. ËøêË°å‰ª£Á†ÅË¥®ÈáèÊ£ÄÊü• (Lint) ÂíåËá™Âä®ÂåñÊµãËØï„ÄÇ
# 3. Âü∫‰∫é Conventional Commits Ëá™Âä®ÁîüÊàêÊõ¥Êñ∞Êó•Âøó (Changelog)„ÄÇ
# 4. ÂàõÂª∫ÂåÖÂê´Êõ¥Êñ∞Êó•ÂøóÂíåÊûÑÂª∫‰∫ßÁâ©ÁöÑ GitHub Release„ÄÇ
# 5. Â∞ÜÊâ©Â±ïÂèëÂ∏ÉÂà∞ Open VSX Registry Âíå Visual Studio Marketplace„ÄÇ
# 6. ÂèëÈÄÅÂèëÂ∏ÉÊàêÂäüÈÄöÁü•Âà∞ Slack„ÄÇ
# ----------------------------------------------------------------

name: Release

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:

jobs:
  release:
    name: Create and Publish Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Set up pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 10.12.1

      - name: Clean up local tags
        run: |
          git tag -d $(git tag -l) 2>/dev/null || true
          git fetch --tags

      - name: Install dependencies
        run: npm ci

      # =================================================================
      # 1. ‰ª£Á†ÅË¥®Èáè‰øùËØÅ (Code Quality Assurance)
      # =================================================================
      # - name: Lint code
      #   run: pnpm lint

      # - name: Run tests
      #   run: pnpm test

      # =================================================================
      # 2. Á°ÆÂÆöÂèëÂ∏ÉÁ±ªÂûã (Determine Release Type)
      # =================================================================
      - name: Determine if pre-release
        id: determine_prerelease
        run: |
          # ÂÆâÂÖ®Âú∞Ëé∑ÂèñËøúÁ®ã‰ø°ÊÅØÔºåÈÅøÂÖçÊ†áÁ≠æÂÜ≤Á™Å
          git fetch origin --prune --prune-tags
          git fetch origin +refs/heads/*:refs/remotes/origin/* --force

          # Ëé∑ÂèñÂΩìÂâçÊ†áÁ≠æÂØπÂ∫îÁöÑÊèê‰∫§ÂìàÂ∏å
          TAG_COMMIT=$(git rev-list -n 1 ${{ github.ref }})
          echo "Tag ${{ github.ref }} points to commit: $TAG_COMMIT"

          # Ê£ÄÊü•ËØ•Êèê‰∫§Âú®Âì™‰∫õÂàÜÊîØ‰∏ä
          BRANCHES=$(git branch -r --contains $TAG_COMMIT | grep -v 'HEAD' | sed 's/origin\///' | tr -d ' ')
          echo "Commit is on branches: $BRANCHES"

          # Ëé∑Âèñ‰∏ªË¶ÅÂàÜÊîØÔºà‰ºòÂÖàÁ∫ßÔºömain > master > release/* > developÔºâ
          MAIN_BRANCH=""
          for branch in $BRANCHES; do
            case $branch in
              main)
                MAIN_BRANCH="main"
                break
                ;;
              master)
                if [[ -z "$MAIN_BRANCH" ]]; then
                  MAIN_BRANCH="master"
                fi
                ;;
              release/*)
                if [[ -z "$MAIN_BRANCH" ]] || [[ "$MAIN_BRANCH" != "main" && "$MAIN_BRANCH" != "master" ]]; then
                  MAIN_BRANCH="$branch"
                fi
                ;;
              develop)
                if [[ -z "$MAIN_BRANCH" ]] || [[ "$MAIN_BRANCH" == "develop" ]]; then
                  MAIN_BRANCH="develop"
                fi
                ;;
            esac
          done

          echo "Primary branch for this tag: $MAIN_BRANCH"

          # Âà§Êñ≠ÊòØÂê¶‰∏∫È¢ÑÂèëÂ∏É
          case $MAIN_BRANCH in
            main|master|release/*)
              echo "is_prerelease=false" >> $GITHUB_OUTPUT
              echo "This is a stable release from branch: $MAIN_BRANCH"
              ;;
            *)
              echo "is_prerelease=true" >> $GITHUB_OUTPUT
              echo "This is a pre-release from branch: $MAIN_BRANCH"
              ;;
          esac

      # =================================================================
      # 3. Ëé∑ÂèñÊõ¥Êñ∞Êó•Âøó (Generate Changelog)
      # =================================================================
      - name: Extract latest changelog section (‰∏≠Êñá)
        id: extract_changelog
        run: |
          body=$(awk '
            BEGIN { capture=0 }
            /^# [0-9]+\.[0-9]+\.[0-9]+ \(/ {
              if (capture) exit;
              capture=1;
            }
            capture { print }
          ' CHANGELOG.zh-CN.md)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$body" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # =================================================================
      # 4. ÂèëÂ∏ÉÂà∞Â∏ÇÂú∫ (Publish to Marketplaces)
      # =================================================================
      - name: Publish to Open VSX Registry
        uses: HaaLeo/publish-vscode-extension@v2
        id: publishToOpenVSX
        with:
          pat: ${{ secrets.OPEN_VSX_TOKEN }}
          preRelease: ${{ steps.determine_prerelease.outputs.is_prerelease }}
          skipDuplicate: true

      - name: Publish to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v2
        id: publishToVSMarketplace
        with:
          pat: ${{ secrets.VS_MARKETPLACE_TOKEN }}
          registryUrl: https://marketplace.visualstudio.com
          extensionFile: ${{ steps.publishToOpenVSX.outputs.vsixPath }}
          preRelease: ${{ steps.determine_prerelease.outputs.is_prerelease }}
          skipDuplicate: true

      # =================================================================
      # 5. ÂàõÂª∫ GitHub Release (Create GitHub Release)
      # =================================================================
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          body: ${{ steps.extract_changelog.outputs.body }}
          files: |
            ${{ steps.publishToOpenVSX.outputs.vsixPath }}
          prerelease: ${{ steps.determine_prerelease.outputs.is_prerelease }}
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}

      # =================================================================
      # 6. ÂèëÂ∏ÉÂêéÈÄöÁü• (Post-Release Notification)
      # =================================================================
      - name: Send Slack Notification on Success
        if: success()
        continue-on-error: true
        uses: slackapi/slack-github-action@v1.26.0
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "üöÄ *New Release Published!* üöÄ\n*Project:* `${{ github.repository }}`\n*Version:* `${{ github.ref_name }}`"
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "View the release details here:\n<${{ steps.create_release.outputs.html_url }}|Release ${{ github.ref_name }}>"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
